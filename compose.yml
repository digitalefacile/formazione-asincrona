version: '3.9'

services:
  app:
    build:
      context: ./services/app
      args:
        BASE_IMAGE: "${APP_BASE_IMAGE:-php:fpm}"
    image: "${APP_IMAGE:-app}"
    depends_on: # [ db ]
      db:
        condition: service_started
      change-vol-ownership:
        condition: service_completed_successfully
    # ports:
    # #    host:container
    #   - "9000:9000"
    volumes:
      - './mnt/moodledata:/var/www/moodledata' # Persistance Data
      - 'src:/var/www/html/'                   # Document Root
      - 'socket:/run/php/'
    environment:
      MOODLE_DATABASE_HOST: db
      # MOODLE_DATABASE_HOST_RO: db_ro
      MOODLE_DATABASE_TYPE: mysqli
      # MOODLE_DATABASE_PORT_NUMBER: 3306
      MOODLE_DATABASE_NAME: moodle_db
      MOODLE_DATABASE_USER: moodle_db_user
      MOODLE_DATABASE_PASSWORD_FILE: '/run/secrets/db_password'
      # MOODLE_DATABASE_PREFIX: 'mdl_'
      MOODLE_REVERSEPROXY: 'true'
      # MOODLE_SSLPROXY: 'true'
      # MOODLE_HOST: 'http://127.0.0.1:8080'
      RUNTYPE:
    # env_file:
    #   - ./secrets/s3_filestore_bucket.env
    configs:
      - source: app_conf
        target: '/var/www/html/config.php' # Moodle config.php
        uid: '33' # Debian's www-data
        gid: '33'
        mode: 0750
    secrets:
      - db_password
  
  cron:
    extends:
      service: app
    build: !reset null
    environment:
      CRON: "true"
  
  web:
    build:
      context: ./services/web
      additional_contexts:
        app_src: ./services/app/src
      args:
        BASE_IMAGE: "${WEB_BASE_IMAGE:-nginx}"
    image: "${WEB_IMAGE:-web}"
    depends_on:
      - app
    environment:
      PHP_HOST: app
    ports:
    #    host:container
      - '8080:80'
    volumes:
      - 'src:/var/www/html/' # /usr/share/nginx/html
      - 'socket:/run/php/'
    # configs:
    #   - source: web_conf
    #     target: '/etc/nginx/conf.d/default.conf'
  
  install:
    profiles: [ "install" ]
    extends:
      service: app
    build: !reset null
    ports: !reset []
    user: www-data
    configs: !reset []
    environment:
      UNATTENDED: 'true'
      #### Install-Only Vars: #####
      MOODLE_ADMIN_USERNAME: user
      MOODLE_ADMIN_PASSWORD_FILE: '/run/secrets/app_password'
      MOODLE_SITE_NAME: Moodle Local Dev
      MOODLE_ADMIN_EMAIL: user@example.com
    command: "deploy.sh auto"
    secrets:
      - app_password
  
  # alb:
  #   image: nginx:alpine
  #   ports:
  #   #    host:container
  #     - "8080:80"
  #   #   - "8443:443"
  #   configs:
  #     - source: alb_conf
  #       target: '/etc/nginx/conf.d/default.conf'

  db:
    image: mysql:8.0
    environment:
      MYSQL_DATABASE: moodle_db
      MYSQL_USER: moodle_db_user
      MYSQL_PASSWORD_FILE: '/run/secrets/db_password'
      MYSQL_ROOT_PASSWORD_FILE: '/run/secrets/db_root_password'
    volumes:
      - './mnt/db_data:/var/lib/mysql'
      # - './mnt/db_dump.sql:/docker-entrypoint-initdb.d/db_dump.sql' # Uncomment to Load a db_dump.sql on first startup
    secrets:
      - db_password
      - db_root_password

  # redis:
  #   image: redis:alpine

  # Workaround: fix volumes permissions
  change-vol-ownership:
    image: alpine
    # user: root
    command:
      - 'sh'
      - '-c'
      - | # NOTE: www-data UID/GID are 33 in Debian-based distros. They are different in Alpine
        echo $$(date) Fixing data permissions...
        find /mnt/* -not \( -user 33 -and -group 33 \) -exec chown 33:33 {} \+
        echo "$$(date) Done!"
    volumes:
      # - 'src:/mnt/moodle'                    # Source
      - './mnt/moodledata:/mnt/moodledata'   # Persistance Data

configs:
#   alb_conf:
#     file: './services/web/etc/nginx.alb.conf'
  app_conf:
    file: './services/app/etc/config.php'
#   web_conf:
#     file: './services/web/etc/nginx.web.conf'

secrets:
  app_password:
    file: './secrets/app_password.sec'
  db_password:
    file: './secrets/db_password.sec'
  db_root_password:
    file: './secrets/db_root_password.sec'

volumes:
  socket: {}
  src: {}
    # driver_opts:
    #   type: none
    #   device: "./services/app/src"
    #   o: bind

networks:
  default: # Default Network created by Compose
    driver: bridge
    driver_opts:
      com.docker.network.bridge.enable_ip_masquerade: "false" # Disable Outgoing Internet Access
